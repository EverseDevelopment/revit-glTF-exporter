name: Compile and run tests

on:
  push:
    branches: [ develop, tests/*, features/*, docs/*, bugs/* ]
    tags:
      - 'v*' # Push events to matching v*, i.e. v1.0, v20.15.10

jobs:
  Build:
    runs-on: windows-latest
    env:
      Solution_Name: Revit_glTF_Exporter.sln

    outputs:
      Version: ${{ steps.gitversion.outputs.nuGetVersionV2 }} 
      CommitsSinceVersionSource: ${{ steps.gitversion.outputs.CommitsSinceVersionSource }}   

    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Setup .NET Core 3.1
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: 3.1.x

      - name: Setup .NET Core 8.0
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: 8.0.x

      - name: Install GitVersion
        uses: gittools/actions/gitversion/setup@v0
        with:
          versionSpec: '5.x'

      - name: Determine Version
        uses: gittools/actions/gitversion/execute@v0
        with:
          useConfigFile: true
          configFilePath: GitVersion.yml
        id: gitversion

      - name: Display GitVersion outputs
        run: |
          echo "MajorMinorPatch: ${{ steps.gitversion.outputs.majorMinorPatch }}"
          echo "PreReleaseNumber: ${{ steps.gitversion.outputs.PreReleaseNumber }}"
          echo "NuGetVersionV2: ${{ steps.gitversion.outputs.nuGetVersionV2 }}"   
          echo "CommitsSinceVersionSource: ${{ steps.gitversion.outputs.CommitsSinceVersionSource }}"

      - name: Setup MSBuild
        uses: microsoft/setup-msbuild@v1.1

      - name: Setup NuGet
        uses: NuGet/setup-nuget@v1.0.5

      - name: Restore NuGet packages
        run: nuget restore Revit_glTF_Exporter.sln 

      - name: Run MSBuild
        run: |
          msbuild Revit_glTF_Exporter.sln /t:Clean,Build /p:Platform=x64 /p:Configuration=Release /p:DeployOnBuild=true /p:PublishProfile=FolderProfile -m

      - name: Rename MSI with GitVersion
        run: |
          $version = "${{ steps.gitversion.outputs.majorMinorPatch }}-${{ steps.gitversion.outputs.PreReleaseNumber }}-b"
          $oldPath = ".\GltfInstaller\Leia - glTF exporter 0.0.0.msi"
          $newName = "Leia - glTF exporter $version.msi"
          $newPath = ".\GltfInstaller\$newName"

          if (Test-Path $oldPath) {
            Rename-Item -Path $oldPath -NewName $newName
            echo "MSI_PATH=$newPath" | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf8 -Append
            echo "MSI_NAME=$newName" | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf8 -Append
          } else {
            Write-Error "MSI file not found: $oldPath"
            exit 1
          }
        shell: pwsh

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.gitversion.outputs.majorMinorPatch }}-${{ steps.gitversion.outputs.PreReleaseNumber}}-b
          release_name: GLTF Exporter v${{ steps.gitversion.outputs.majorMinorPatch }}-${{ steps.gitversion.outputs.PreReleaseNumber}} Testing
          draft: false
          prerelease: true

      - name: Upload Release Asset
        id: upload-release-asset 
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ env.MSI_PATH }}
          asset_name: ${{ env.MSI_NAME }}_testing.exe
          asset_content_type: application/zip
